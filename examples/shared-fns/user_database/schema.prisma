// Copyright (c) Yahilo. and its affiliates.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

enum PosterSource {
  RAW
  GITHUB
}

/// Person with access to the system and who owns objects in the database.
model User {
  system_user_id                 String    @id @default(uuid()) /// @desc Unique identifier for the user. @dn User @p identifiedBy
  organization_id                String /// @desc Unique identifier of the organization associated with the user. @dn Organization  
  business_unit_id               String /// @desc Unique identifier of the business unit with which the user is associated. @dn Business Unit 
  parent_system_user_id          String? /// @desc Unique identifier of the manager of the user. @dn Manager 
  first_name                     String? /// @desc First name of the user. @dn First Name @p hasA
  salutation                     String? /// @desc Salutation for correspondence with the user. @dn Salutation @p hasA
  middle_name                    String? /// @desc Middle name of the user. @dn Middle Name @p hasA
  last_name                      String? /// @desc Last name of the user. @dn Last Name @p hasA
  personal_email_address         String? /// @desc Personal email address of the user. @dn Email 2 @p hasA
  full_name                      String? /// @desc Full name of the user. @dn Full Name @p hasA
  nick_name                      String? /// @desc Nickname of the user. @dn Nickname @p hasA
  title                          String? /// @desc Title of the user. @dn Title @p hasA
  internal_email_address         String? /// @desc Internal email address for the user. @dn Primary Email @p hasA
  job_title                      String? /// @desc Job title of the user. @dn Job Title @p hasA
  mobile_alert_email             String? /// @desc Mobile alert email address for the user. @dn Mobile Alert Email @p hasA
  preferred_email_code           String? /// @desc Preferred email address for the user. @dn Preferred Email @p hasA
  home_phone                     String? /// @desc Home phone number for the user. @dn Home Phone @p hasA
  mobile_phone                   String? /// @desc Mobile phone number for the user. @dn Mobile Phone @p hasA
  preferred_phone_code           String? /// @desc Preferred phone number for the user. @dn Preferred Phone @p hasA
  preferred_address_code         String? /// @desc Preferred address for the user. @dn Preferred Address @p hasA
  photo_url                      String? /// @desc URL for the Website on which a photo of the user is located. @dn Photo URL @p hasA
  domain_name                    String /// @desc Active Directory domain of which the user is a member. @dn User Name @p hasA
  passport_lo                    Int? /// @desc For internal use only. @dn Passport Lo @p hasA
  created_on                     DateTime? /// @desc Date and time when the user was created. @dn Created On @p createdOn
  passport_hi                    Int? /// @desc For internal use only. @dn Passport Hi @p hasA
  disabled_reason                String? /// @desc Reason for disabling the user. @dn Disabled Reason @p hasA
  modified_on                    DateTime? /// @desc Date and time when the user was last modified. @dn Modified On @p modifiedOn
  created_by                     String? /// @desc Unique identifier of the user who created the user. @dn Created By 
  employee_id                    String? /// @desc Employee identifier for the user. @dn Employee @p hasA
  modified_by                    String? /// @desc Unique identifier of the user who last modified the user. @dn Modified By 
  is_disabled                    Boolean? /// @desc Information about whether the user is enabled. @dn Status @p hasA
  government_id                  String? /// @desc Government identifier for the user. @dn Government @p hasA
  version_number                 Int? /// @desc Version number of the user. @dn Version number @p hasA
  skills                         String? /// @desc Skill set of the user. @dn Skills @p hasA
  display_in_service_views       Boolean? /// @desc Whether to display the user in service views. @dn Display in Service Views @p hasA
  calendar_id                    String? /// @desc Fiscal calendar associated with the user. @dn Calendar @p hasA
  setup_user                     Boolean /// @desc Check if user is a setup user. @dn Restricted Access Mode @p hasA
  incoming_email_delivery_method String /// @desc Incoming email delivery method for the user. @dn Incoming Email Delivery Method @p hasA
  outgoing_email_delivery_method String /// @desc Outgoing email delivery method for the user. @dn Outgoing Email Delivery Method @p hasA
  import_sequence_number         Int? /// @desc Unique identifier of the data import or data migration that created this record. @dn Import Sequence Number @p hasA
  access_mode                    String /// @desc Type of user. @dn Access Mode @p hasA
  invite_status_code             String? /// @desc User invitation status. @dn Invitation Status @p hasA
  overridden_created_on          DateTime? /// @desc Date and time that the record was migrated. @dn Record Created On @p createdOn
  utc_conversion_time_zone_code  Int? /// @desc Time zone code that was in use when the record was created. @dn UTC Conversion Time Zone Code @p hasA
  time_zone_rule_version_number  Int? /// @desc For internal use only. @dn Time Zone Rule Version Number @p hasA
  yomi_full_name                 String? /// @desc Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters. @dn Yomi Full Name @p hasA
  yomi_last_name                 String? /// @desc Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters. @dn Yomi Last Name @p hasA
  yomi_middle_name               String? /// @desc Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters. @dn Yomi Middle Name @p hasA
  yomi_first_name                String? /// @desc Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters. @dn Yomi First Name @p hasA
  is_integration_user            Boolean /// @desc Check if user is an integration user. @dn Integration user mode @p hasA
  default_filters_populated      Boolean /// @desc Indicates if default outlook filters have been populated. @dn Default Filters Populated @p hasA
  created_on_behalf_by           String? /// @desc Unique identifier of the delegate user who created the systemuser. @dn Created By (Delegate) 
  queue_id                       String? /// @desc Unique identifier of the default queue for the user. @dn Default Queue 
  modified_on_behalf_by          String? /// @desc Unique identifier of the delegate user who last modified the systemuser. @dn Modified By (Delegate) 
  email_router_access_approval   String /// @desc Shows the status of the primary email address. @dn Primary Email Status @p hasA
  transaction_currency_id        String? /// @desc Unique identifier of the currency associated with the systemuser. @dn Currency 
  exchange_rate                  Decimal? /// @desc Exchange rate for the currency associated with the systemuser with respect to the base currency. @dn Exchange Rate @p hasA
  cal_type                       String /// @desc License type of user. @dn License Type @p hasA
  is_licensed                    Boolean /// @desc Information about whether the user is licensed. @dn User Licensed @p hasA
  is_sync_with_directory         Boolean /// @desc Information about whether the user is synced with the directory. @dn User Synced @p hasA
  user_license_type              Int /// @desc Shows the type of user license. @dn User License Type @p hasA
  entity_image_id                String? /// @desc For internal use only. @dn Entity Image Id @p hasA
  process_id                     String? /// @desc Shows the ID of the process. @dn Process @p hasA
  stage_id                       String? /// @desc Shows the ID of the stage. @dn Process Stage @p hasA
  position_id                    String? /// @desc User's position in hierarchical security model. @dn Position 
  traversed_path                 String? /// @desc For internal use only. @dn Traversed Path @p hasA
  application_id                 String? /// @desc The identifier for the application. This is used to access data in another application. @dn Application ID @p hasA
  application_id_uri             String? /// @desc The URI used as a unique logical identifier for the external app. This can be used to validate the application. @dn Application ID URI @p hasA
  identity_id                    Int /// @desc For internal use only. @dn Unique user identity id @p hasA
  territory_id                   String? /// @desc Unique identifier of the territory to which the user is assigned. @dn Territory 
  site_id                        String? /// @desc Site at which the user is located. @dn Site 
  primary_address_id             String? ///  @desc User primary address identifier. @dn Primary Address @p hasA

  created_by_user_rel            User?  @relation("created_by_user_rel", fields: [created_by], references: [system_user_id])
  created_by_user                User[] @relation("created_by_user_rel")
  modified_by_user_rel           User?  @relation("modified_by_user_rel", fields: [modified_by], references: [system_user_id])
  modified_by_user               User[] @relation("modified_by_user_rel")
  created_on_behalf_by_user_rel  User?  @relation("created_on_behalf_by_user_rel", fields: [created_on_behalf_by], references: [system_user_id])
  created_on_behalf_by_user      User[] @relation("created_on_behalf_by_user_rel")
  modified_on_behalf_by_user_rel User?  @relation("modified_on_behalf_by_user_rel", fields: [modified_on_behalf_by], references: [system_user_id])
  modified_on_behalf_by_user     User[] @relation("modified_on_behalf_by_user_rel")

  parent_user User?  @relation("parent_user", fields: [parent_system_user_id], references: [system_user_id])
  children    User[] @relation("parent_user")
}